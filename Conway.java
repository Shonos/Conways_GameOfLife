/* * To change this template, choose Tools | Templates * and open the template in the editor. */package conway;/** * * @author Shaun */import java.awt.*;import java.awt.event.*;import javax.swing.*;import java.util.TimerTask;import java.util.Timer;public class Conway extends JFrame{    Timer timer = new Timer();    private int length = 77, width = 77;    private JPanel panel = new JPanel();    private JPanel southPanel = new JPanel();    private JPanel mainPanel = new JPanel();    private JLabel statusbar;    private JButton Start, SpeedUp, Slowdown,Pause;    private Cell [][] cell = new Cell[length][width];    private Boolean conT  =false;    private class mouseHandler implements MouseListener, MouseMotionListener{                public void mouseClicked(MouseEvent event){            statusbar.setText(String.format("Clicked at %d, %d", event.getX(), event.getY()));            setState(event);        }        public void mouseReleased(MouseEvent event){            statusbar.setText(String.format("Mouse released"));        }        public void mousePressed(MouseEvent event){            statusbar.setText(String.format("Mouse Pressed"));        }        public void mouseEntered(MouseEvent event){            statusbar.setText(String.format("You entered the area"));        }        public void mouseExited(MouseEvent event){            statusbar.setText(String.format("You exited the area"));        }        //these are mouse motion events        public void mouseDragged(MouseEvent event){            statusbar.setText("dragging mouse");        }        public void mouseMoved(MouseEvent event){            //statusbar.setText("mouse moved");        }                public void setState(MouseEvent event){            Cell c = (Cell)event.getSource();            if(c.getState()==true){                event.getComponent().setBackground(Color.WHITE);                  c.setState(false);            }            else{                event.getComponent().setBackground(Color.BLACK);                c.setState(true);            }            event.setSource(c);        }                        }                   public Conway(){                super("Game of Life");        mouseHandler handler = new mouseHandler();        setSize(1024,800);        setLayout(new BorderLayout());        mainPanel.add(panel, BorderLayout.CENTER);        mainPanel.setBackground(Color.gray);        add(mainPanel, BorderLayout.CENTER);        panel.setLayout(new GridLayout(length-1,width-1));        for(int i=0;i<width;i++){            for(int z =0; z<length;z++){                cell[z][i] = new Cell();                cell[z][i].setCoords(i, z);            }        }                for(int i = 1; i<length-1; i++){            for(int z = 1; z<width-1; z++){                                cell[i][z].setBorder(BorderFactory.createLineBorder(Color.GRAY));                panel.add(cell[i][z]);                cell[i][z].addMouseListener(handler);            }        }                       statusbar = new JLabel("default");                        panel.addMouseListener(handler);        panel.addMouseMotionListener(handler);                setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        setVisible(true);                 final TimerTask listener = new TimerTask(){              public void updateCounts(int x, int y){                for(int z = x - 1;z<=x+1;z++){                    for(int p =y-1;p<=y+1;p++){                        if(!(x==z && y==p)){                        if(cell[z][p].getState()){                            cell[z][p].addNeighbor();                            // System.out.println("Cell " + z +"," + p + " updated neighbor count to " + cell[z][p].getNeighbor() + " because of " +x+" "+y);                        }                        else if(cell[z][p].getNextState()){                            cell[z][p].addNeighbor();                            //System.out.println("Cell " + z +"," + p + " updated neighbor count to " + cell[z][p].getNeighbor()+ " because of " +x+" "+y);                        }                        else {                            cell[z][p].setNextState(true);                            cell[z][p].addNeighbor();                             //System.out.println("Cell " + z +"," + p + " updated neighbor count to " + cell[z][p].getNeighbor()+ " because of " +x+" "+y);                        }                                                }}                }            }            //@Override            public void run(){                if(conT){                for(int y = 1; y<width-1;y++){                    for(int x = 1; x<length-1;x++){                        if(cell[x][y].getState()){                            updateCounts(x,y);                                                    }                    }                }                                for(int y = 1; y<width-1;y++){                    for(int x = 1; x<length-1;x++){                        if(cell[x][y].getState()){                            if(!(cell[x][y].getNeighbor()==2 || cell[x][y].getNeighbor()==3)){                               cell[x][y].setState(false);                               cell[x][y].setBackground(Color.WHITE);                            }                        }                    }                }                                for(int y = 1; y<width-1;y++){                    for(int x = 1; x<length-1;x++){                        if(cell[x][y].getNextState()){                            if(cell[x][y].getNeighbor()==3){                               cell[x][y].setState(true);                               cell[x][y].setBackground(Color.BLACK);                            }                                                    }                        cell[x][y].setNextState(false);                        cell[x][y].resetNeighbor();                    }                }                                            }            }                    };        Start = new JButton();        Start.setText("START");        SpeedUp = new JButton();        SpeedUp.setText("SpeedUp");        Slowdown = new JButton();        Slowdown.setText("Slow Down");        Pause = new JButton();        Pause.setText("Pause");        add(southPanel, BorderLayout.SOUTH);        southPanel.setLayout(new GridLayout(1,1));        timer.schedule(listener, 0,   400);        ActionListener buttons =  new ActionListener(){                         public void actionPerformed(ActionEvent ae){                if(ae.getSource()==Start){                    conT = true;                 }                else if(ae.getSource()== Pause){                    conT = false;                                    }            }        };        Start.addActionListener(buttons);        Pause.addActionListener(buttons);        southPanel.add(Start);        southPanel.add(Pause);                                            }            public static void main(String[] args){        SwingUtilities.invokeLater(new Runnable() {            public void run() {                new Conway();                            }        });            }    }